#include <TFT_eSPI.h>
#include <SPI.h>

// Display e sprite
TFT_eSPI tft = TFT_eSPI();
TFT_eSprite horizon = TFT_eSprite(&tft);

// Sensor ultrassônico A02YYUW via UART (Serial2)
HardwareSerial UltraSerial(2);
const int RX_PIN = 18;
const int TX_PIN = 19;

unsigned char data_buffer[4] = {0};
float distance = 0;
unsigned char checksum;

float pitch = 0;
float targetPitch = 0;
unsigned long lastUpdate = 0;

void setup() {
  tft.init();
  tft.setRotation(2);
  tft.fillScreen(TFT_BLACK);

  horizon.setColorDepth(8);
  horizon.createSprite(240, 240);

  UltraSerial.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);
}

void loop() {
  if (millis() - lastUpdate > 50) {
    lastUpdate = millis();

    int newDist = readUltrasonic();
    if (newDist >= 0) {
      distance = newDist; // em cm
      distance = constrain(distance, 0, 450);

      // Mapeia 0–450 cm para pitch de +120 (chão) a -120 (céu)
      targetPitch = map(distance, 0, 450, 120, -120);
    }

    // Suaviza o movimento do horizonte
    pitch = pitch * 0.9 + targetPitch * 0.1;

    drawHorizon(pitch, distance);
  }
}

int readUltrasonic() {
  while (UltraSerial.available() >= 4) {
    if (UltraSerial.read() == 0xFF) {
      data_buffer[0] = 0xFF;
      for (int i = 1; i < 4; i++) {
        data_buffer[i] = UltraSerial.read();
      }

      checksum = (data_buffer[0] + data_buffer[1] + data_buffer[2]) & 0xFF;
      if (data_buffer[3] == checksum) {
        int dist_mm = (data_buffer[1] << 8) + data_buffer[2];
        return dist_mm / 10; // em centímetros
      }
    }
  }
  return -1;
}

void drawHorizon(float pitch, float distance) {
  int cx = 120;
  int cy = 120;

  float pitchOffset = pitch;

  horizon.fillSprite(TFT_BLACK);

  // Desenha o fundo (céu e chão)
  for (int y = 0; y < 240; y++) {
    for (int x = 0; x < 240; x++) {
      float dx = x - cx;
      float dy = y - cy;

      float rotY = dy + pitchOffset;
      uint16_t color = (rotY < 0) ? TFT_NAVY : TFT_GREEN;
      horizon.drawPixel(x, y, color);
    }
  }

  // Desenha as linhas de pitch (marcas horizontais)
  for (int i = -3; i <= 3; i++) {
    if (i == 0) continue;
    float offset = i * 20;
    drawPitchLine(cx, cy, offset);
  }

  // Indicador de orientação (triângulo)
  horizon.fillTriangle(cx, cy - 119, cx - 6, cy - 109, cx + 6, cy - 109, TFT_WHITE);

  // "V" central simulando o bico do avião
  int vSize = 10;
  int lineY = cy + vSize;
  horizon.drawLine(cx - vSize, cy, cx, lineY, TFT_WHITE);
  horizon.drawLine(cx + vSize, cy, cx, lineY, TFT_WHITE);
  horizon.drawLine(20, cy, cx - vSize, cy, TFT_WHITE);
  horizon.drawLine(cx + vSize, cy, 220, cy, TFT_WHITE);

  // Moldura circular
  horizon.drawCircle(cx, cy, 119, TFT_WHITE);

  // Marcação de ângulos
  for (int angle = -60; angle <= 60; angle += 30) {
    float rad = angle * DEG_TO_RAD;
    int x1 = cx + cos(rad - HALF_PI) * 110;
    int y1 = cy + sin(rad - HALF_PI) * 110;
    int x2 = cx + cos(rad - HALF_PI) * 119;
    int y2 = cy + sin(rad - HALF_PI) * 119;
    horizon.drawLine(x1, y1, x2, y2, TFT_WHITE);
  }

  // Exibição da distância no topo
  horizon.setTextDatum(MC_DATUM);
  horizon.setTextSize(4);
  horizon.setTextColor(TFT_WHITE, TFT_BLACK);
  horizon.drawString(String(distance, 1) + " cm", cx, cy - 90);

  horizon.pushSprite(0, 0);
}

void drawPitchLine(int cx, int cy, float offset) {
  float length = 40;
  float x1 = -length / 2;
  float y1 = offset;
  float x2 = length / 2;
  float y2 = offset;

  int x1r = cx + x1;
  int y1r = cy + y1;
  int x2r = cx + x2;
  int y2r = cy + y2;

  horizon.drawLine(x1r, y1r, x2r, y2r, TFT_WHITE);
}
