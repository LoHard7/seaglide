#include <TFT_eSPI.h>
#include <SPI.h>
#include <math.h>

// ========== Configurações da Tela ==========
TFT_eSPI tft = TFT_eSPI();
TFT_eSprite horizon = TFT_eSprite(&tft);

// ========== Pinos ==========
int pitchPin = 34;
int rollPin = 35;
int resetPin = 32;
int switchViewPin = 13; // Botão para alternar entre horizonte e bússola
int potPin = 33;        // Potenciômetro da bússola

// ========== Estado ==========
bool mostrandoHorizonte = true;
bool switchButtonPressed = false;

// ========== Horizonte ==========
float pitch = 0;
float roll = 0;
float pitchZero = 0;
float rollZero = 0;
unsigned long lastUpdate = 0;
bool buttonPressed = false;
unsigned long buttonPressTime = 0;

// ========== Bússola ==========
float angle = 0;
float lastAngle = -1;
const char* labels[] = {"N", "E", "S", "W"};
const int angles[] = {0, 90, 180, 270};
int lastX[4] = {0};
int lastY[4] = {0};

// ========== Setup ==========
void setup() {
  tft.init();
  tft.setRotation(2);
  tft.fillScreen(TFT_BLACK);
  analogReadResolution(12);

  horizon.setColorDepth(8);
  horizon.createSprite(240, 240);

  pinMode(pitchPin, INPUT);
  pinMode(rollPin, INPUT);
  pinMode(resetPin, INPUT_PULLUP);
  pinMode(switchViewPin, INPUT_PULLUP); // Botão de alternância

  // Moldura fixa da bússola (só desenhada uma vez)
  tft.drawCircle(120, 120, 118, TFT_WHITE);

  // Define tamanho de texto da bússola
  tft.setTextSize(3);  // <<<< AQUI aumentamos a letra
}

// ========== Loop ==========
void loop() {
  // Verifica botão de troca de visualização
  if (digitalRead(switchViewPin) == LOW && !switchButtonPressed) {
    switchButtonPressed = true;
    mostrandoHorizonte = !mostrandoHorizonte;
    tft.fillScreen(TFT_BLACK);
    if (!mostrandoHorizonte) {
      tft.drawCircle(120, 120, 118, TFT_WHITE); // Redesenha moldura da bússola
    }
  }
  if (digitalRead(switchViewPin) == HIGH) {
    switchButtonPressed = false;
  }

  // Chama visualização correta
  if (mostrandoHorizonte) {
    atualizarHorizonte();
  } else {
    atualizarBussola();
  }
}

// ========== Horizonte Artificial ==========
void atualizarHorizonte() {
  if (millis() - lastUpdate > 50) {
    lastUpdate = millis();

    if (digitalRead(resetPin) == LOW) {
      if (!buttonPressed) {
        buttonPressed = true;
        buttonPressTime = millis();
        pitchZero = map(analogRead(pitchPin), 0, 4095, -90, 90);
        rollZero = map(analogRead(rollPin), 0, 4095, -90, 90);
      }
      if (millis() - buttonPressTime >= 3000) {
        pitchZero = 0;
        rollZero = 0;
      }
    }

    if (digitalRead(resetPin) == HIGH && buttonPressed) {
      buttonPressed = false;
    }

    pitch = map(analogRead(pitchPin), 0, 4095, -90, 90) - pitchZero;
    roll = map(analogRead(rollPin), 0, 4095, -90, 90) - rollZero;

    drawHorizon(pitch, roll);
  }
}

void drawHorizon(float pitch, float roll) {
  int cx = 120;
  int cy = 120;

  float rollRad = roll * DEG_TO_RAD;
  float pitchOffset = pitch * 2.0;

  horizon.fillSprite(TFT_BLACK);

  for (int y = 0; y < 240; y++) {
    for (int x = 0; x < 240; x++) {
      float dx = x - cx;
      float dy = y - cy;
      float rotX = cos(rollRad) * dx - sin(rollRad) * (dy + pitchOffset);
      float rotY = sin(rollRad) * dx + cos(rollRad) * (dy + pitchOffset);
      uint16_t color = (rotY < 0) ? TFT_BLUE : TFT_BROWN;
      horizon.drawPixel(x, y, color);
    }
  }

  for (int i = -3; i <= 3; i++) {
    if (i == 0) continue;
    float offset = i * 20;
    drawPitchLine(cx, cy, offset, rollRad);
  }

  horizon.fillTriangle(cx, cy - 119, cx - 6, cy - 109, cx + 6, cy - 109, TFT_WHITE);
  int vSize = 10;
  horizon.drawLine(cx - vSize, cy, cx, cy + vSize, TFT_WHITE);
  horizon.drawLine(cx + vSize, cy, cx, cy + vSize, TFT_WHITE);
  horizon.drawLine(20, cy, cx - vSize, cy, TFT_WHITE);
  horizon.drawLine(cx + vSize, cy, 220, cy, TFT_WHITE);
  horizon.drawCircle(cx, cy, 119, TFT_WHITE);

  for (int angle = -60; angle <= 60; angle += 30) {
    float rad = angle * DEG_TO_RAD;
    int x1 = cx + cos(rad - HALF_PI) * 110;
    int y1 = cy + sin(rad - HALF_PI) * 110;
    int x2 = cx + cos(rad - HALF_PI) * 119;
    int y2 = cy + sin(rad - HALF_PI) * 119;
    horizon.drawLine(x1, y1, x2, y2, TFT_WHITE);
  }

  horizon.pushSprite(0, 0);
}

void drawPitchLine(int cx, int cy, float offset, float rollRad) {
  float length = 40;
  float x1 = -length / 2;
  float y1 = offset;
  float x2 = length / 2;
  float y2 = offset;

  int x1r = cx + cos(rollRad) * x1 - sin(rollRad) * y1;
  int y1r = cy + sin(rollRad) * x1 + cos(rollRad) * y1;
  int x2r = cx + cos(rollRad) * x2 - sin(rollRad) * y2;
  int y2r = cy + sin(rollRad) * x2 + cos(rollRad) * y2;

  horizon.drawLine(x1r, y1r, x2r, y2r, TFT_WHITE);
}

// ========== Bússola ==========
void atualizarBussola() {
  int potValue = analogRead(potPin);
  angle = map(potValue, 0, 4095, 0, 360);

  if ((int)angle == (int)lastAngle) return;
  lastAngle = angle;

  for (int i = 0; i < 4; i++) {
    tft.setCursor(lastX[i], lastY[i]);
    tft.setTextColor(TFT_BLACK, TFT_BLACK);
    tft.print(labels[i]);

    float totalAngle = radians(angles[i] + angle);
    int x = 120 + cos(totalAngle) * (118 - 30) - 12;
    int y = 120 + sin(totalAngle) * (118 - 30) - 16;

    lastX[i] = x;
    lastY[i] = y;

    tft.setCursor(x, y);
    uint16_t color = (i == 0) ? TFT_RED : TFT_WHITE;
    tft.setTextColor(color, TFT_BLACK);
    tft.print(labels[i]);
  }
}
